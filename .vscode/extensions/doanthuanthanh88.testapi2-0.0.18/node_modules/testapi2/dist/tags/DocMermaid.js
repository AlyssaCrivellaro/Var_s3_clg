"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DocMermaid = void 0;
const Api_1 = require("./Api");
const Group_1 = require("./Group");
const OutputFile_1 = require("./OutputFile");
class DocMermaid extends OutputFile_1.OutputFile {
    constructor(attrs) {
        super(attrs);
    }
    exec() {
        return __awaiter(this, void 0, void 0, function* () {
            let rs = ['sequenceDiagram'];
            const tab = [];
            function loopGroup(g) {
                var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r;
                let rs = [];
                for (const t of g.steps) {
                    if (t instanceof Group_1.Group) {
                        tab.push('  ');
                        rs = rs.concat(loopGroup(t));
                        tab.splice(0, 1);
                    }
                    else if (t instanceof Api_1.Api) {
                        if (!t.disabled && t.mermaid) {
                            if (rs.length === 0) {
                                if (((_a = g.mermaid) === null || _a === void 0 ? void 0 : _a.title) || g.title) {
                                    rs.push(`${tab.join('')}Note left of ${t.mermaid.subject}: ${((_b = g.mermaid) === null || _b === void 0 ? void 0 : _b.title) || g.title}`);
                                }
                                if ((_c = g.mermaid) === null || _c === void 0 ? void 0 : _c.alt)
                                    rs.push(`${tab.join('')}alt ${(_d = g.mermaid) === null || _d === void 0 ? void 0 : _d.alt}`);
                                else if ((_e = g.mermaid) === null || _e === void 0 ? void 0 : _e.loop)
                                    rs.push(`${tab.join('')}loop ${(_f = g.mermaid) === null || _f === void 0 ? void 0 : _f.loop}`);
                            }
                            if (t.mermaid.subject && t.mermaid.target) {
                                if (t.mermaid.subject === t.mermaid.target) {
                                    if (t.mermaid.response) {
                                        rs.push(`${tab.join('')}${t.mermaid.target}-->>${t.mermaid.subject}: ${t.mermaid.response || `${(_g = t.response) === null || _g === void 0 ? void 0 : _g.status} - ${(_h = t.response) === null || _h === void 0 ? void 0 : _h.statusText}`}`);
                                    }
                                    else {
                                        rs.push(`${tab.join('')}${t.mermaid.subject}->>${t.mermaid.target}: ${t.mermaid.request || t.title}`);
                                    }
                                }
                                else {
                                    rs.push(`${tab.join('')}${t.mermaid.subject}->>${t.mermaid.target}: ${t.mermaid.request || t.title}`);
                                    rs.push(`${tab.join('')}${t.mermaid.target}-->>${t.mermaid.subject}: ${t.mermaid.response || `${(_j = t.response) === null || _j === void 0 ? void 0 : _j.status} - ${(_k = t.response) === null || _k === void 0 ? void 0 : _k.statusText}`}`);
                                }
                            }
                            else if (t.mermaid.subject2 && t.mermaid.target2) {
                                if (t.mermaid.subject2 === t.mermaid.target2) {
                                    if (t.mermaid.response) {
                                        rs.push(`${tab.join('')}${t.mermaid.target2}->${t.mermaid.subject2}: ${t.mermaid.response || `${(_l = t.response) === null || _l === void 0 ? void 0 : _l.status} - ${(_m = t.response) === null || _m === void 0 ? void 0 : _m.statusText}`}`);
                                    }
                                    else {
                                        rs.push(`${tab.join('')}${t.mermaid.subject2}-->${t.mermaid.target2}: ${t.mermaid.request || t.title}`);
                                    }
                                }
                                else {
                                    rs.push(`${tab.join('')}${t.mermaid.subject2}->${t.mermaid.target2}: ${t.mermaid.request || t.title}`);
                                    rs.push(`${tab.join('')}${t.mermaid.target2}-->${t.mermaid.subject2}: ${t.mermaid.response || `${(_o = t.response) === null || _o === void 0 ? void 0 : _o.status} - ${(_p = t.response) === null || _p === void 0 ? void 0 : _p.statusText}`}`);
                                }
                            }
                        }
                    }
                }
                if ((_q = g.mermaid) === null || _q === void 0 ? void 0 : _q.alt)
                    rs.push(`${tab.join('')}end`);
                else if ((_r = g.mermaid) === null || _r === void 0 ? void 0 : _r.loop)
                    rs.push(`${tab.join('')}end`);
                return rs;
            }
            rs = rs.concat(loopGroup(this.tc.group));
            this.content = rs.join('\n');
            if (!this.title)
                this.title = 'Mermaid document';
            yield this.save();
        });
    }
}
exports.DocMermaid = DocMermaid;
//# sourceMappingURL=DocMermaid.js.map