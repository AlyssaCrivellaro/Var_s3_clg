"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Exec = void 0;
const global_config_1 = require("../global_config");
const Tag_1 = require("./Tag");
const child_process_1 = require("child_process");
global_config_1.globalConfig.event.on('log:exec', (msg) => {
    global_config_1.globalConfig.log('%s', msg.toString());
});
class Exec extends Tag_1.Tag {
    constructor(attrs) {
        super(attrs);
        if (this.var && typeof this.var === 'object')
            this.log = [];
    }
    exec() {
        const [cmd, ...args] = this.args;
        if (this.title !== null) {
            global_config_1.globalConfig.event.emit('log:exec', this.title || `> ${cmd} ${args.map(e => `"${e}"`).join(" ")}`);
        }
        const prc = child_process_1.spawn(cmd, args);
        return new Promise((resolve) => {
            prc.stdout.on('data', msg => {
                var _a;
                (_a = this.log) === null || _a === void 0 ? void 0 : _a.push(msg.toString());
                global_config_1.globalConfig.event.emit('log:exec', msg);
            });
            prc.stderr.on('data', msg => {
                var _a;
                (_a = this.log) === null || _a === void 0 ? void 0 : _a.push(msg.toString());
                global_config_1.globalConfig.event.emit('log:exec', msg, true);
            });
            prc.on('close', (code) => {
                this.code = code;
                if (this.var) {
                    if (typeof this.var === 'string') {
                        global_config_1.globalConfig.vars[this.var] = this.code;
                    }
                    else {
                        for (const k in this.var) {
                            global_config_1.globalConfig.vars[k] = Tag_1.Tag.replaceVars(this.var[k], Object.assign(Object.assign({}, global_config_1.globalConfig.vars), { $vars: global_config_1.globalConfig.vars, $: this, $$: this.$$, $utils: global_config_1.globalConfig.utils }));
                        }
                    }
                }
                resolve(code);
            });
        });
    }
}
exports.Exec = Exec;
//# sourceMappingURL=Exec.js.map