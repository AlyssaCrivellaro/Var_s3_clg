"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DocMarkdown = void 0;
const OutputFile_1 = require("./OutputFile");
const DocUtils_1 = require("./DocUtils");
const Testcase_1 = require("./Testcase");
const Api_1 = require("./Api");
const lodash_1 = require("lodash");
class DocMarkdown extends OutputFile_1.OutputFile {
    constructor(attrs) {
        super(attrs);
    }
    exec() {
        return __awaiter(this, void 0, void 0, function* () {
            let menu = [];
            if (this.tc.title)
                menu.push(`# ${this.tc.title}`);
            if (this.tc.description)
                menu.push(`_${this.tc.description}_`);
            menu.push('');
            menu.push('');
            if (this.tc.version)
                menu.push(`> Version ${this.tc.version}`);
            if (this.tc.developer) {
                menu.push('');
                menu.push(`> Developed by [**${this.tc.developer}**](mailto:${this.tc.developer})`);
                menu.push('');
            }
            menu.push('');
            menu.push('## APIs');
            const details = ['## Details'];
            const apis = Testcase_1.Testcase.APIs.filter(api => api.docs);
            const tags = [];
            apis.forEach(a => {
                var _a, _b, _c;
                (_c = (_b = (_a = a.docs) === null || _a === void 0 ? void 0 : _a.md) === null || _b === void 0 ? void 0 : _b.tags) === null || _c === void 0 ? void 0 : _c.forEach(t => {
                    let tag = tags.find(tag => tag.name === t);
                    if (!tag) {
                        tag = { name: t, items: [] };
                        tags.push(tag);
                    }
                    tag.items.push(a);
                });
            });
            tags.sort((a, b) => +(a.name > b.name) > 0 ? 1 : -1);
            for (let tag of tags) {
                tag.items.sort((a, b) => +(a.title > b.title) > 0 ? 1 : -1);
            }
            const menus = [];
            menus.push(`|No.  | API Description | Actions |`);
            menus.push(`|---: | ---- | ---- |`);
            for (let tag of tags) {
                const testItems = [];
                const idx = menus.length;
                let len = 0;
                tag.items.forEach((tag, i) => {
                    testItems.push(tag.toTestObject());
                    len++;
                    menus.push(`|${i + 1}.| [**${tag.title}**](#${tag.index}) |` + `[Try now](${tag.toTestLink()}) |`);
                });
                menus.splice(idx, 0, `| <a name='ANCHOR_-1'></a> | __${tag.name}__ - _${len} items_ |` + `[Import](${Api_1.Api.toImportLink(testItems)}) |`);
            }
            menu.push('');
            apis.forEach((tag) => {
                var _a, _b, _c, _d, _e, _f;
                details.push(`### <a name='${tag.index}'></a>[**${tag.title}**](${tag.toTestLink()})`);
                details.push('');
                details.push(`#### \`${tag.method}\` ${(_a = tag.response) === null || _a === void 0 ? void 0 : _a.status} **${tag._url.replace(/\$?{([^}]+)}/g, '*`{$1}`*')}**`);
                details.push('');
                const _reqHeaders = tag.headers || {};
                const reqHeaders = ((_b = this.headers) === null || _b === void 0 ? void 0 : _b.length) ? lodash_1.pick(_reqHeaders, this.headers) : _reqHeaders;
                if (DocUtils_1.isGotData(reqHeaders)) {
                    details.push('Request headers');
                    details.push(`\`\`\`json`);
                    details.push(JSON.stringify(reqHeaders, null, '  '));
                    details.push(`\`\`\``);
                }
                else {
                    details.push(`~~Request headers~~`);
                    details.push('');
                }
                if (DocUtils_1.isGotData(tag.body)) {
                    details.push('Request body');
                    details.push(`\`\`\`json`);
                    details.push(JSON.stringify(tag.body, null, '  '));
                    details.push(`\`\`\``);
                }
                else {
                    details.push(`~~Request body~~`);
                    details.push('');
                }
                const _resHeaders = ((_c = tag.response) === null || _c === void 0 ? void 0 : _c.headers) || {};
                const resHeaders = ((_d = this.responseHeaders) === null || _d === void 0 ? void 0 : _d.length) ? lodash_1.pick(_resHeaders, this.responseHeaders) : _resHeaders;
                if (DocUtils_1.isGotData(resHeaders)) {
                    details.push('Response headers');
                    details.push(`\`\`\`json`);
                    details.push(JSON.stringify(resHeaders, null, '  '));
                    details.push(`\`\`\``);
                }
                else {
                    details.push(`~~Response headers~~`);
                    details.push('');
                }
                if (DocUtils_1.isGotData((_e = tag.response) === null || _e === void 0 ? void 0 : _e.data, false)) {
                    details.push('Response data');
                    details.push(`\`\`\`json`);
                    details.push(JSON.stringify((_f = tag.response) === null || _f === void 0 ? void 0 : _f.data, null, '  '));
                    details.push(`\`\`\``);
                }
                else {
                    details.push(`~~Response data~~`);
                    details.push('');
                }
            });
            menu = menu.concat(menus);
            if (this.tc.servers) {
                menu.push('## Servers');
                menu = menu.concat(Object.keys(this.tc.servers).map(des => `- **${this.tc.servers[des]}** - _${des}_`));
            }
            this.content = menu.concat(details).join('\n');
            if (!this.title)
                this.title = 'Markdown document';
            yield this.save();
        });
    }
}
exports.DocMarkdown = DocMarkdown;
//# sourceMappingURL=DocMarkdown.js.map