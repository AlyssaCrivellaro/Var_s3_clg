"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Wrk = void 0;
const crypto_1 = require("crypto");
const fs_1 = require("fs");
const os_1 = require("os");
const path_1 = require("path");
const querystring_1 = require("querystring");
const Exec_1 = require("../tags/Exec");
class Wrk extends Exec_1.Exec {
    constructor(attrs) {
        super(attrs);
        this.args = ['wrk'];
    }
    prepare() {
        const _super = Object.create(null, {
            prepare: { get: () => super.prepare }
        });
        return __awaiter(this, void 0, void 0, function* () {
            yield _super.prepare.call(this);
            if (this.connections)
                this.args.push(`-c${this.connections}`);
            if (this.duration)
                this.args.push(`-d${this.duration}`);
            if (this.theads)
                this.args.push(`-t${this.theads}`);
            if (this.timeout)
                this.args.push(`-T${this.timeout}`);
            if (this.latency)
                this.args.push(`--latency`);
            if (this.version)
                this.args.push(`--version`);
            if (this.$$) {
                if (!this.title) {
                    if (this.$$.title) {
                        this.title = `> Benchmark: ${this.$$.title}`;
                    }
                }
                if (this.$$.headers) {
                    Object.keys(this.$$.headers).forEach(k => {
                        this.args.push('-H');
                        this.args.push(`${k}: ${this.$$.headers[k]}`);
                    });
                }
                if (this.$$.method != 'GET') {
                    const cnt = [`wrk.method = "${this.$$.method}"`];
                    if (this.bodyData) {
                        cnt.push(`wrk.body = "${querystring_1.stringify(this.$$.body)}"`);
                    }
                    cnt.push('');
                    if (!this.script) {
                        this.script = path_1.join(os_1.tmpdir(), `.tmp.wrk.${crypto_1.randomBytes(4).readUInt32LE(0)}.lua`);
                        fs_1.writeFileSync(this.script, cnt.join('\n'));
                    }
                    this.args.push('-s');
                    this.args.push(`${this.script}`);
                }
                this.args.push(this.$$.fullUrl);
            }
        });
    }
    exec() {
        const _super = Object.create(null, {
            exec: { get: () => super.exec }
        });
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            try {
                yield _super.exec.call(this);
            }
            finally {
                if ((_a = this.script) === null || _a === void 0 ? void 0 : _a.startsWith('.tmp.wrk.'))
                    fs_1.unlinkSync(this.script);
            }
        });
    }
}
exports.Wrk = Wrk;
//# sourceMappingURL=Wrk.js.map