"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Api = exports.URL = exports.Query = exports.Method = void 0;
const Tag_1 = require("./Tag");
const node_fetch_1 = __importDefault(require("node-fetch"));
const lodash_1 = require("lodash");
const querystring_1 = require("querystring");
const Testcase_1 = require("./Testcase");
const chalk_1 = __importDefault(require("chalk"));
const form_data_1 = __importDefault(require("form-data"));
const url_1 = require("url");
const pako_1 = __importDefault(require("pako"));
const global_config_1 = require("../global_config");
global_config_1.globalConfig.event
    .on('log:api:begin', (api) => {
    if (!api.isBackground) {
        global_config_1.globalConfig.log('%s. %s - %s %s', chalk_1.default.gray(api.index.toString()), api.title, chalk_1.default.gray(api.method.toString()), chalk_1.default.gray(api.fullUrl));
    }
})
    .on('log:api:validate:done', (api) => {
    if (api.error && typeof (api.tc.debug) !== 'boolean' && typeof (api.debug) !== 'boolean') {
        global_config_1.globalConfig.log('%s %s', chalk_1.default.red('⬤'), chalk_1.default.underline.gray(`${api.toTestLink()}`));
    }
})
    .on('log:api:done', (api) => {
    var _a, _b, _c;
    if (!api.isBackground || api.error) {
        global_config_1.globalConfig.log('- %s %s %s', chalk_1.default[((_a = api.response) === null || _a === void 0 ? void 0 : _a.ok) ? 'green' : 'red'].bold(`${(_b = api.response) === null || _b === void 0 ? void 0 : _b.status.toString()}`), chalk_1.default.gray((_c = api.response) === null || _c === void 0 ? void 0 : _c.statusText), chalk_1.default.gray(`- ${api.time.toString()}ms`));
    }
    if (api.error || (!api.isBackground && (api.tc.debug || api.debug))) {
        global_config_1.globalConfig.log('%s %s', chalk_1.default.red('⬤'), chalk_1.default.underline.gray(`${api.toTestLink()}`));
    }
    if (api.error) {
        api.tc.result.failed++;
        global_config_1.globalConfig.log(chalk_1.default.red(api.error.message));
    }
})
    .on('log:api:end', (_api) => {
});
var Method;
(function (Method) {
    Method["GET"] = "GET";
    Method["POST"] = "POST";
    Method["PUT"] = "PUT";
    Method["DELETE"] = "DELETE";
    Method["HEAD"] = "HEAD";
    Method["PATCH"] = "PATCH";
})(Method = exports.Method || (exports.Method = {}));
class Query {
    constructor(name, value, required) {
        this.name = name;
        this.value = value;
        this.required = required;
    }
    static ToValue(qs) {
        return Object.keys(qs).reduce((sum, e) => {
            sum[e] = qs[e].value;
            return sum;
        }, {});
    }
}
exports.Query = Query;
class URL {
    constructor(url, params = {}, query = {}) {
        this.url = url;
        this.pt = /([^\$]){([^}]+)}/g;
        this.params = {};
        this.query = {};
        for (const _k in params) {
            const vl = params[_k];
            let required = _k.includes('*');
            const k = _k.replace(/\*/g, '');
            this.params[k] = new Query(k, vl, required);
        }
        for (const _k in query) {
            const vl = query[_k];
            let required = _k.includes('*');
            const k = _k.replace(/\*/g, '');
            this.query[k] = new Query(k, vl, required);
        }
    }
    get hasParams() {
        return this.params && Object.keys(this.params).length > 0;
    }
    get hasQuery() {
        return this.query && Object.keys(this.query).length > 0;
    }
    toURLParams() {
        const _url = this.url.replace(/\*/g, '').replace(this.pt, `$1$\{$.url.params.$2.value\}`);
        return _url;
    }
    toURLQuery() {
        const rs = Object.keys(this.query).reduce((sum, k) => {
            sum[k] = this.query[k].value;
            return sum;
        }, {});
        return querystring_1.stringify(rs);
    }
}
exports.URL = URL;
class Api extends Tag_1.Tag {
    constructor(attrs) {
        super(undefined);
        this.index = 0;
        const ext = (attrs['<-'] && !Array.isArray(attrs['<-'])) ? attrs['<-'].split(',').map(e => e.trim()) : attrs['<-'];
        let base = {};
        ext === null || ext === void 0 ? void 0 : ext.forEach(key => {
            lodash_1.merge(base, lodash_1.cloneDeep(Api.Templates.get(key) || {}));
        });
        attrs = lodash_1.merge({ headers: {} }, base, attrs);
        lodash_1.merge(this, lodash_1.omit(attrs, ['<-', '->']));
        const exp = attrs['->'];
        if (exp) {
            Api.Templates.set(exp, lodash_1.cloneDeep(this));
        }
        if (this.benchmark)
            this.benchmark.$$ = this;
        if (attrs.url && !(attrs.url instanceof URL))
            this.url = new URL(attrs.url, attrs.params, attrs.query);
    }
    get isBackground() {
        return this.title === null;
    }
    get fullUrl() {
        const q = this.url.toURLQuery();
        const ques = q ? (this._url.includes('?') ? '&' : '?') : '';
        return (this.baseURL || '') + this._url + ques + q;
    }
    prepare() {
        if (!this.method)
            this.method = Method.GET;
        this._url = this.url.toURLParams();
        super.prepare(undefined, ['validate', 'var', 'benchmark', 'mermaid']);
    }
    validates() {
        return __awaiter(this, void 0, void 0, function* () {
            for (const v of this.validate.filter(v => v)) {
                v.slient = this.slient;
                v.tc = this.tc;
                yield v.prepare(this);
                if (!v.disabled) {
                    this.error = yield v.exec();
                }
                if (this.error) {
                    this.tc.result.failed++;
                    return;
                }
            }
            this.tc.result.passed++;
        });
    }
    exec() {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function* () {
            const req = {
                method: this.method,
                headers: this.headers,
                get contentType() {
                    return this.headers['content-type'] || this.headers['Content-Type'];
                }
            };
            if (![Method.GET, Method.HEAD].includes(this.method)) {
                if (this.body) {
                    if ((_a = req.headers['content-type']) === null || _a === void 0 ? void 0 : _a.includes('application/x-www-form-urlencoded')) {
                        req.body = new url_1.URLSearchParams();
                        for (let k in this.body) {
                            req.body.append(k, this.body[k]);
                        }
                    }
                    else if ((_b = req.headers['content-type']) === null || _b === void 0 ? void 0 : _b.includes('multipart/form-data')) {
                        req.body = new form_data_1.default();
                        for (let k in this.body) {
                            req.body.append(k, this.body[k]);
                        }
                        req.headers = Object.assign(req.body.getHeaders(), req.headers);
                    }
                    else {
                        req.body = JSON.stringify(this.body);
                    }
                }
            }
            req.headers = Object.assign({
                'content-type': 'application/json'
            }, req.headers);
            this.headers = req.headers;
            if (this.benchmark) {
                this.benchmark.bodyData = req.body;
                yield this.benchmark.prepare();
                yield this.benchmark.exec();
                return;
            }
            this.index = ++Api.Index;
            const begin = Date.now();
            try {
                global_config_1.globalConfig.event.emit('log:api:begin', this);
                const res = yield node_fetch_1.default(this.fullUrl, req);
                let data;
                try {
                    if ((_c = req.contentType) === null || _c === void 0 ? void 0 : _c.includes('application/json')) {
                        data = yield res.json();
                    }
                    else {
                        data = yield res.text();
                    }
                }
                catch (_d) { }
                this.response = {
                    ok: res.ok,
                    status: res.status,
                    statusText: res.statusText,
                    headers: Object.keys(res.headers.raw()).reduce((sum, k) => {
                        sum[k] = res.headers.get(k);
                        return sum;
                    }, {}),
                    data,
                };
                if (this.var) {
                    if (typeof this.var === 'string') {
                        global_config_1.globalConfig.vars[this.var] = this.response.data;
                    }
                    else {
                        for (const k in this.var) {
                            global_config_1.globalConfig.vars[k] = Tag_1.Tag.replaceVars(this.var[k], Object.assign(Object.assign({}, global_config_1.globalConfig.vars), { $vars: global_config_1.globalConfig.vars, $: this, $$: this.$$, $utils: global_config_1.globalConfig.utils }));
                        }
                    }
                }
                if (this.mermaid) {
                    this.mermaid = Tag_1.Tag.replaceVars(this.mermaid, Object.assign(Object.assign({}, global_config_1.globalConfig.vars), { $vars: global_config_1.globalConfig.vars, $: this, $$: this.$$, $utils: global_config_1.globalConfig.utils }));
                }
            }
            catch (err) {
                this.error = err;
            }
            finally {
                this.time = Date.now() - begin;
                if (this.error) {
                    global_config_1.globalConfig.event.emit('log:api:done', this);
                }
                else {
                    global_config_1.globalConfig.event.emit('log:api:done', this);
                    if (this.validate) {
                        yield this.validates();
                        global_config_1.globalConfig.event.emit('log:api:validate:done', this);
                    }
                }
                global_config_1.globalConfig.event.emit('log:api:end', this);
                Testcase_1.Testcase.APIs.push(this);
            }
        });
    }
    toTestObject(baseURL) {
        const item = {
            id: this.index,
            name: this.title,
            method: this.method.toString(),
            baseURL: (baseURL || this.baseURL),
            baseURLs: Object.keys(this.tc.servers).map(des => {
                return {
                    description: `${des} - ${this.tc.servers[des]}`,
                    url: this.tc.servers[des]
                };
            }),
            url: this.fullUrl,
            headers: this.headers,
            cate: this.tc.title,
            body: {
                text: undefined,
                json: {},
                form: {},
                multipart: {}
            },
            response: Object.assign(Object.assign({ error: this.error }, this.response), { executionTime: this.time }),
            contentType: this.headers['content-type'] || 'application/json',
        };
        if (item.response && Array.isArray(item.response.data)) {
            item.response.data = item.response.data.slice(0, 1);
        }
        if (item.contentType.includes('application/json')) {
            item.headers['content-type'] = 'application/json';
        }
        else if (item.contentType.includes('multipart/form-data')) {
            item.headers['content-type'] = 'multipart/form-data';
        }
        else if (item.contentType.includes('text/plain')) {
            item.headers['content-type'] = 'text/plain';
        }
        else {
            item.headers['content-type'] = 'application/x-www-form-urlencoded';
        }
        if (item.contentType === 'application/json') {
            if (this.body)
                item.body.json = this.body;
        }
        else if (item.contentType === 'text/plain') {
            if (this.body)
                item.body.text = this.body;
        }
        else if (item.contentType === 'multipart/form-data') {
            item.body.multipart = this.body || {};
        }
        else {
            item.body.form = this.body || {};
        }
        return item;
    }
    toTestLink(link) {
        const item = this.toTestObject(link);
        const str = pako_1.default.deflate(JSON.stringify(item), { level: 9 });
        const sdatas = Buffer.from(str).toString('base64');
        const links = `http://test.onapis.com/Test/${sdatas}`;
        return links;
    }
    static toImportLink(items) {
        const str = pako_1.default.deflate(JSON.stringify(items), { level: 9 });
        const sdatas = Buffer.from(str).toString('base64');
        const links = `http://test.onapis.com/Test/${sdatas}`;
        return links;
    }
}
exports.Api = Api;
Api.Templates = new Map();
Api.Index = 0;
//# sourceMappingURL=Api.js.map