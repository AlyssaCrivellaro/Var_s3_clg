"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Group = void 0;
const lodash_1 = require("lodash");
const Tag_1 = require("./Tag");
const global_config_1 = require("../global_config");
global_config_1.globalConfig.event
    .on('log:group:begin', (e) => {
    if (e.title)
        global_config_1.globalConfig.group(e.title, ':', e.description);
})
    .on('log:group:end', (e) => {
    if (e.title)
        global_config_1.globalConfig.groupEnd();
});
class Group extends Tag_1.Tag {
    constructor(attrs) {
        super(undefined);
        const ext = (attrs['<-'] && !Array.isArray(attrs['<-'])) ? attrs['<-'].split(',').map(e => e.trim()) : attrs['<-'];
        let base = {};
        ext === null || ext === void 0 ? void 0 : ext.forEach(key => {
            lodash_1.merge(base, lodash_1.cloneDeep(Group.Templates.get(key) || {}));
        });
        attrs = lodash_1.merge({}, base, attrs);
        lodash_1.merge(this, lodash_1.omit(attrs, ['<-', '->']));
        const exp = attrs['->'];
        if (exp) {
            Group.Templates.set(exp, lodash_1.cloneDeep(this));
        }
        if (this.steps)
            this.steps = lodash_1.flatten(this.steps);
    }
    prepare(scope) {
        const _super = Object.create(null, {
            prepare: { get: () => super.prepare }
        });
        return __awaiter(this, void 0, void 0, function* () {
            yield _super.prepare.call(this, scope);
        });
    }
    exec() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.disabled) {
                if (this.loop) {
                    const arrs = Tag_1.Tag.replaceVars(this.loop, Object.assign(Object.assign({}, global_config_1.globalConfig.vars), { $vars: global_config_1.globalConfig.vars, $: this, $$: this.$$, $utils: global_config_1.globalConfig.utils }), ['steps']);
                    for (let key in arrs) {
                        const item = lodash_1.cloneDeep(this);
                        item.tc = this.tc;
                        item.loopKey = key;
                        item.loopValue = arrs[key];
                        yield item.each();
                    }
                }
                else {
                    yield this.each();
                }
            }
        });
    }
    each() {
        return __awaiter(this, void 0, void 0, function* () {
            global_config_1.globalConfig.event.emit('log:group:begin', this);
            for (let i in this.steps) {
                const step = this.steps[i];
                step.$$ = this;
                step.tc = this.tc;
                yield step.prepare();
                if (!step.disabled) {
                    yield step.exec();
                }
            }
            global_config_1.globalConfig.event.emit('log:group:end', this);
        });
    }
}
exports.Group = Group;
Group.Templates = new Map();
//# sourceMappingURL=Group.js.map