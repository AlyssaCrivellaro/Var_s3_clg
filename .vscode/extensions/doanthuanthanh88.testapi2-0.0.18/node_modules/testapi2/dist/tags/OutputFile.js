"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.OutputFile = void 0;
const chalk_1 = __importDefault(require("chalk"));
const global_config_1 = require("../global_config");
const Tag_1 = require("./Tag");
const fs_1 = require("fs");
const path_1 = require("path");
const Testcase_1 = require("./Testcase");
global_config_1.globalConfig.event.on('log:output', (e) => {
    global_config_1.globalConfig.log(chalk_1.default.magentaBright('- %s was saved at "%s"'), e.title, e.saveTo);
});
class OutputFile extends Tag_1.Tag {
    constructor(attrs) {
        super(attrs);
    }
    prepare() {
        const _super = Object.create(null, {
            prepare: { get: () => super.prepare }
        });
        return __awaiter(this, void 0, void 0, function* () {
            yield _super.prepare.call(this);
            this.saveTo = path_1.join(Testcase_1.Testcase.RootDir, this.saveTo);
        });
    }
    exec() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.save();
        });
    }
    save() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.title)
                this.title = 'A file';
            fs_1.writeFileSync(this.saveTo, this.content && typeof this.content === 'object' ? JSON.stringify(this.content) : `${this.content}`);
            global_config_1.globalConfig.event.emit('log:output', this);
        });
    }
}
exports.OutputFile = OutputFile;
//# sourceMappingURL=OutputFile.js.map