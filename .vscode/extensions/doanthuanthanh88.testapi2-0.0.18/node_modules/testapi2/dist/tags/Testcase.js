"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Testcase = void 0;
const Group_1 = require("./Group");
const lodash_1 = require("lodash");
const Tag_1 = require("./Tag");
const chalk_1 = __importDefault(require("chalk"));
const global_config_1 = require("../global_config");
global_config_1.globalConfig.event
    .on('log:testcase:begin', (e) => {
    if (e.title)
        global_config_1.globalConfig.group(e.title, `(${e.version})`, ':', e.description);
})
    .on('log:testcase:end', (e) => {
    global_config_1.globalConfig.log();
    if (e.title)
        global_config_1.globalConfig.groupEnd();
    global_config_1.globalConfig.log();
    global_config_1.globalConfig.group(chalk_1.default.bgCyan.bold('Summary'), '-', chalk_1.default.gray(`${e.result.time}ms`));
    global_config_1.globalConfig.log('- %s: %d', chalk_1.default.green('Passed'), e.result.passed);
    global_config_1.globalConfig.log('- %s: %d', chalk_1.default.red('Failed'), e.result.failed);
    global_config_1.globalConfig.log('- %s: %d', 'Totals', e.result.totals);
    global_config_1.globalConfig.groupEnd();
});
class Testcase {
    constructor(root) {
        this.result = {
            passed: 0,
            failed: 0,
            time: 0,
            get totals() {
                return this.passed + this.failed;
            }
        };
        const t = lodash_1.pick(root, ['title', 'version', 'servers', 'developer', 'debug', 'description', 'vars', 'group']);
        const g = lodash_1.omit(root, ['title', 'version', 'servers', 'developer', 'debug', 'description', 'vars', 'group', 'templates']);
        lodash_1.merge(this, { title: '', version: '', description: '', servers: {}, endpoints: {} }, t);
        global_config_1.globalConfig.vars = lodash_1.merge({}, global_config_1.globalConfig.vars, Tag_1.Tag.replaceVars(root.vars));
        this.group = new Group_1.Group(g);
        this.group.tc = this;
        if (root.script)
            eval(root.script);
    }
    exec() {
        return __awaiter(this, void 0, void 0, function* () {
            global_config_1.globalConfig.event.emit('log:testcase:begin', this);
            const begin = Date.now();
            yield this.group.exec();
            this.result.time = Date.now() - begin;
            global_config_1.globalConfig.event.emit('log:testcase:end', this);
            global_config_1.globalConfig.event.emit('finished', this.result.failed > 0, this);
        });
    }
}
exports.Testcase = Testcase;
Testcase.APIs = [];
//# sourceMappingURL=Testcase.js.map