"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.main = exports.InputYamlText = exports.InputYamlFile = void 0;
const Testcase_1 = require("./tags/Testcase");
const path_1 = require("path");
const fs_1 = require("fs");
const global_config_1 = require("./global_config");
const js_yaml_1 = require("js-yaml");
const tags_1 = require("./tags");
const lodash_1 = require("lodash");
class InputYamlFile {
    constructor(yamlFile) {
        this.yamlFile = yamlFile;
    }
}
exports.InputYamlFile = InputYamlFile;
class InputYamlText {
    constructor(yamlText, yamlFile) {
        this.yamlText = yamlText;
        this.yamlFile = yamlFile;
    }
}
exports.InputYamlText = InputYamlText;
function main(inp) {
    return __awaiter(this, void 0, void 0, function* () {
        let root;
        let yamlFile = path_1.resolve(inp.yamlFile);
        try {
            const s = fs_1.lstatSync(yamlFile);
            if (s.isDirectory())
                yamlFile = path_1.join(yamlFile, 'index.yaml');
            if (!fs_1.existsSync(yamlFile))
                throw new Error();
        }
        catch (err) {
            throw new Error(`Could not found scenario file at "${yamlFile}"`);
        }
        Testcase_1.Testcase.RootDir = path_1.dirname(yamlFile);
        if (inp instanceof InputYamlFile) {
            root = js_yaml_1.safeLoad(fs_1.readFileSync(yamlFile, 'utf8'), { schema: tags_1.SCHEMA });
        }
        else if (inp instanceof InputYamlText) {
            root = js_yaml_1.safeLoad(inp.yamlText, { schema: tags_1.SCHEMA });
        }
        else {
            throw new Error('Wrong input');
        }
        if (Array.isArray(root)) {
            root = {
                title: path_1.basename(yamlFile),
                description: yamlFile,
                steps: root
            };
        }
        if (root.steps)
            root.steps = lodash_1.flatten(root.steps);
        global_config_1.globalConfig.tc = new Testcase_1.Testcase(root);
        global_config_1.globalConfig.vars.$tc = global_config_1.globalConfig.tc;
        global_config_1.globalConfig.group('Utils func: %s', '-------------------');
        global_config_1.globalConfig.log('> %s', Object.keys(global_config_1.globalConfig.utils).join(','));
        global_config_1.globalConfig.groupEnd();
        global_config_1.globalConfig.group('Validate func: %s', '-------------------');
        global_config_1.globalConfig.log('> %s', Object.keys(global_config_1.globalConfig.validate).join(','));
        global_config_1.globalConfig.groupEnd();
        global_config_1.globalConfig.log();
        yield global_config_1.globalConfig.tc.exec();
        return global_config_1.globalConfig.tc;
    });
}
exports.main = main;
//# sourceMappingURL=main.js.map